/ Get the first input.
Input
skipcond 800 / Ensure a positive integer is read.
	jump no_lcm
	store x

/ Get the second input
Input
SkipCond 800
	jump no_lcm
	store y

subt x

skipcond 800 / If y > x then loop x times.
	jump y_smaller

	load y
	store larger
	
	/ Set smaller to x
	load x
	store smaller
	
	/ Multiply x and y and store it as product. 
	mul_x_times, load x
	subt mulcounter

	skipcond 800 / When x-1 reached, stop multiplying.
		jump find_gcd

		load product
		add y
		store product
		/ Increment mulcounter
		load mulcounter
		add incrementer
		store mulcounter
		jump mul_x_times


/ If y is smaller of the two.
y_smaller, load x
store larger

load y
store smaller

mul_y_times, load y
subt mulcounter
	skipcond 800 / When y-1 reached, stop multiplying.
		jump find_gcd

		load product
		add x
		store product
		
		/ Increment mulcounter
		load mulcounter
		add incrementer
		store mulcounter
		jump mul_y_times


/ Finding the GCD of the numbers.
/ Using the Euclidean method.

/ Performing larger % smaller
find_gcd, load larger
store modulo

find_modulo, load modulo
		subt smaller

		skipcond 800 / If during repeated subtraction, you get a value <= 0. Stop dividing.
		jump if_gcd_found

		store modulo
		jump find_modulo

	if_gcd_found, skipcond 000 	/ Check for exact division.
				jump set_gcd 	/ If exact division occurs, then, GCD = smaller.

				/ Else, find GCD (smaller, larger % smaller)
				load smaller
				store larger
				load modulo
				store smaller
				jump find_gcd
					
	set_gcd, load smaller
			store gcd
			 
print_lcm, load product
/ (product/gcd) = lcm.
/ Basic Integer division - Only handles positive fractions properly.
/ Handling exact division.
store p_product

/ GCD is never 0 for any two non-zero positive integers.

/ Perform (product/gcd)
/ Continously subtracting gcd from product untill a value <0 is encountered.
loop, load p_product
subt gcd
store p_product

skipcond 800 / If p_product - gcd <= 0. then check for exact division.
	jump has_lcm
	
	/ Increment quotient(lcm) by 1.
	load lcm
	add incrementer
	store lcm
	
	/ Go back to dividing.
	jump loop

has_lcm, skipcond 400 / Check exact division.
			jump no_lcm

			load lcm
			add incrementer
			Output
			Halt
			
no_lcm,Halt


x, dec 0
y, dec 0
initializer, dec 0
incrementer, dec 1


product, dec 0
p_product, dec 0 / Not required if it's ok to lose original value of product.
mulcounter, dec 0

smaller, dec 0
larger, dec 0
modulo, dec 0

lcm, dec 0
gcd, dec 1
